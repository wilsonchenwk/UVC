#include <string>
#include <bits/stdc++.h>

//#define ONLINE_JUDGE
#ifndef ONLINE_JUDGE    
#include <gmock/gmock.h>
#endif
/*
Given a number, we can form a number chain by
1. arranging its digits in descending order
2. arranging its digits in ascending order
3. subtracting the number obtained in (2) from the number obtained (1) to form a new number
4. and repeat these steps unless the new number has already appeared in the chain
Note that 0 is a permitted digit. The number of distinct numbers in the chain is the length of the
chain. You are to write a program that reads numbers and outputs the number chain and the length
of that chain for each number read.
Input
The input consists of a sequence of positive numbers, all less than 109, each on its own line, terminated
by ‘0’. The input file contains at most 5000 numbers.
Output
The output consists of the number chains generated by the input numbers, followed by their lengths
exactly in the format indicated below. After each number chain and chain length, including the last
one, there should be a blank line. No chain will contain more than 1000 distinct numbers.
Sample Input
123456789
1234
444
0
Sample Output
Original number was 123456789
987654321 - 123456789 = 864197532
987654321 - 123456789 = 864197532
Chain length 2
Original number was 1234
4321 - 1234 = 3087
8730 - 378 = 8352
8532 - 2358 = 6174
7641 - 1467 = 6174
Chain length 4
Original number was 444
444 - 444 = 0
0 - 0 = 0
Chain length 2
*/
#include <string>
#include <bits/stdc++.h>
#include <time.h>
#define ONLINE_JUDGE
#ifndef ONLINE_JUDGE    
#include <gmock/gmock.h>
#endif

#define TIME_MEASUREMENT    0

using namespace std;

//  std::reverse(copy.begin(), copy.end());

static inline void get_odered_vector(uint32_t val,vector<uint8_t> &out)
{
    while (val)
    {
        out.push_back(val%10);
        val=val/10;
    }
    sort(out.begin(),out.end());
    return;
}




static inline uint32_t get_ascending_val(const vector<uint8_t> &in)
{
    uint32_t result = 0;

    for(uint32_t i=0 ; i < in.size() ; i++)
        result = result * 10 + in[i];

    return result;
}

static inline uint32_t get_descending_val(const vector<uint8_t> &in)
{
    uint32_t result = 0;

    for(int i=in.size()-1 ; i>=0 ; i--)
        result = result * 10 + in[i];

    return result;
}

void uva263_unit_resolver()
{
    uint32_t val,val_asc,val_dsc;
    while (cin >> val) {
        if(val == 0)
            break;
        unordered_set <uint32_t> result;
        cout<<"Original number was " << val << endl;
        int chain_length = 0;
        // Start measuring time
    #if TIME_MEASUREMENT
        auto start = chrono::steady_clock::now();
    #endif
        while (1)
        {
            vector<uint8_t> odered_vector;
            get_odered_vector(val,odered_vector);
            val_asc = get_ascending_val(odered_vector);
            val_dsc = get_descending_val(odered_vector);
            val = val_dsc - val_asc;
            cout <<val_dsc<< " - " << val_asc <<" = "<< val <<endl;
            chain_length++; 
            if(val == 0){;
                chain_length++;
                cout <<val << " - " << val << " = 0"<<endl;
                break;
            }
            if (result.count(val))
                break;   
            result.insert(val);
        } 
   
    #if TIME_MEASUREMENT
        auto end = chrono::steady_clock::now();
        cout << "Elapsed time in nanoseconds: "
        << chrono::duration_cast<chrono::nanoseconds>(end - start).count()
        << " ns" << endl;
    #endif
        cout << "Chain length " << chain_length << endl<< endl;
    }
}

int main(int argc, char** argv)    //on the top might be more easily to find out
{
#ifdef ONLINE_JUDGE
    uva263_unit_resolver();
    return 0;
#else    
    testing::InitGoogleMock(&argc, argv);
    return RUN_ALL_TESTS();
#endif    
}

